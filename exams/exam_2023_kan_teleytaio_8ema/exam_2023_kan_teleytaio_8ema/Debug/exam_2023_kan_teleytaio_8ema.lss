
exam_2023_kan_teleytaio_8ema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000663  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b9  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000285  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000028  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <is_moving>:
unsigned char a,b,c;


int is_moving(unsigned char *point)
{
	if(*point!= 0x80 && *point != 0x01)
  92:	fc 01       	movw	r30, r24
  94:	80 81       	ld	r24, Z
  96:	80 38       	cpi	r24, 0x80	; 128
  98:	29 f0       	breq	.+10     	; 0xa4 <is_moving+0x12>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	31 f4       	brne	.+12     	; 0xaa <is_moving+0x18>
	{
		return 1;
	}
	else
	{
		return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

int is_moving(unsigned char *point)
{
	if(*point!= 0x80 && *point != 0x01)
	{
		return 1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		return 0;
	}
	
}
  ae:	08 95       	ret

000000b0 <main>:


void main()
{
	DDRC = 0x00;
  b0:	14 ba       	out	0x14, r1	; 20
	DDRA = 0x03;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;//0x80 is in basement 0x01 is first floor
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23

	PORTB = 0x80;
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		printf("hello world!!!\n");
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 92 00 	call	0x124	; 0x124 <puts>
		if (is_moving(&PINB) == 1) //kineitai
  c6:	86 e3       	ldi	r24, 0x36	; 54
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 49 00 	call	0x92	; 0x92 <is_moving>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <main+0x38>
		{
			if (PINA == 1)
  d2:	89 b3       	in	r24, 0x19	; 25
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	21 f4       	brne	.+8      	; 0xe0 <main+0x30>
			{ 
				PORTB = PORTB<<1;
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	88 0f       	add	r24, r24
  dc:	88 bb       	out	0x18, r24	; 24
  de:	ef cf       	rjmp	.-34     	; 0xbe <main+0xe>
			}
			else 
			{
				PORTB = PORTB>>1; 	
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	86 95       	lsr	r24
  e4:	88 bb       	out	0x18, r24	; 24
			}
	
		continue;
  e6:	eb cf       	rjmp	.-42     	; 0xbe <main+0xe>
		}
		else //akinito
		{
		    //check for movement intiation
				PORTA = 0;
  e8:	1b ba       	out	0x1b, r1	; 27
			
			if ((PINC == 0x12) || (PINC == 0x11) ||(PINC == 0x13))
  ea:	83 b3       	in	r24, 0x13	; 19
  ec:	82 31       	cpi	r24, 0x12	; 18
  ee:	31 f0       	breq	.+12     	; 0xfc <main+0x4c>
  f0:	83 b3       	in	r24, 0x13	; 19
  f2:	81 31       	cpi	r24, 0x11	; 17
  f4:	19 f0       	breq	.+6      	; 0xfc <main+0x4c>
  f6:	83 b3       	in	r24, 0x13	; 19
  f8:	83 31       	cpi	r24, 0x13	; 19
  fa:	29 f4       	brne	.+10     	; 0x106 <main+0x56>
			{
			  PORTA = 2; 
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8b bb       	out	0x1b, r24	; 27
			  PORTB = PORTB>>1;
 100:	88 b3       	in	r24, 0x18	; 24
 102:	86 95       	lsr	r24
 104:	88 bb       	out	0x18, r24	; 24
			}
			if((PINC == 0x0C)||(PINC == 0x09) || (PINC == 0x0f))
 106:	83 b3       	in	r24, 0x13	; 19
 108:	8c 30       	cpi	r24, 0x0C	; 12
 10a:	31 f0       	breq	.+12     	; 0x118 <main+0x68>
 10c:	83 b3       	in	r24, 0x13	; 19
 10e:	89 30       	cpi	r24, 0x09	; 9
 110:	19 f0       	breq	.+6      	; 0x118 <main+0x68>
 112:	83 b3       	in	r24, 0x13	; 19
 114:	8f 30       	cpi	r24, 0x0F	; 15
 116:	99 f6       	brne	.-90     	; 0xbe <main+0xe>
			{
				PORTA = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8b bb       	out	0x1b, r24	; 27
				PORTB = PORTB<<1;
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	88 0f       	add	r24, r24
 120:	88 bb       	out	0x18, r24	; 24
 122:	cd cf       	rjmp	.-102    	; 0xbe <main+0xe>

00000124 <puts>:
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x2>
 130:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x3>
 134:	23 81       	ldd	r18, Z+3	; 0x03
 136:	21 ff       	sbrs	r18, 1
 138:	1b c0       	rjmp	.+54     	; 0x170 <puts+0x4c>
 13a:	8c 01       	movw	r16, r24
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	f8 01       	movw	r30, r16
 142:	81 91       	ld	r24, Z+
 144:	8f 01       	movw	r16, r30
 146:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <__data_end+0x2>
 14a:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <__data_end+0x3>
 14e:	db 01       	movw	r26, r22
 150:	18 96       	adiw	r26, 0x08	; 8
 152:	ed 91       	ld	r30, X+
 154:	fc 91       	ld	r31, X
 156:	19 97       	sbiw	r26, 0x09	; 9
 158:	88 23       	and	r24, r24
 15a:	31 f0       	breq	.+12     	; 0x168 <puts+0x44>
 15c:	09 95       	icall
 15e:	89 2b       	or	r24, r25
 160:	79 f3       	breq	.-34     	; 0x140 <puts+0x1c>
 162:	df ef       	ldi	r29, 0xFF	; 255
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	ec cf       	rjmp	.-40     	; 0x140 <puts+0x1c>
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	09 95       	icall
 16c:	89 2b       	or	r24, r25
 16e:	19 f0       	breq	.+6      	; 0x176 <puts+0x52>
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	02 c0       	rjmp	.+4      	; 0x17a <puts+0x56>
 176:	8d 2f       	mov	r24, r29
 178:	9c 2f       	mov	r25, r28
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
